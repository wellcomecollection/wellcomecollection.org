@mixin respond-to($point, $condition: min-width) {
  // Ensure media query isn't in quotes
  $condition: unquote($condition);
  // Check global breakpoints first
  @if map-has-key($breakpoints, $point) {
    @media ($condition: map-get($breakpoints, $point)) {
      @content;
    }
    // Failing that, check local tweakpoints
  } @else if map-has-key($tweakpoints, $point) {
    @media ($condition: map-get($tweakpoints, $point)) {
      @content;
    }
  } @else {
    @warn 'Could not find `#{$point}` in both local ($tweakpoints) and global ($breakpoints) contexts. Media block omitted.';
  }
}

@mixin respond-between($point1, $point2) {
  // Check global breakpoints first
  @if map-has-key($breakpoints, $point1) and map-has-key($breakpoints, $point2) {
    @media (min-width: map-get($breakpoints, $point1)) and (max-width: map-get($breakpoints, $point2) - 1) {
      @content;
    }
    // Failing that, check local tweakpoints
  } @else if map-has-key($tweakpoints, $point1) {
    @media (min-width: map-get($tweakpoints, $point1)) and (max-width: map-get($tweakpoints, $point2) - 1) {
      @content;
    }
  } @else {
    @warn 'Could not find `#{$point1}` and/or `#{$point2}` in both local ($tweakpoints) and global ($breakpoints) contexts. Media block omitted.';
  }
}

@mixin clearfix {
  &:before,
  &:after {
    content: '';
    display: table;
  }

  &:after {
    clear: both;
  }
}

@mixin grid-cells($columns, $key) {
  @for $i from 1 through $columns {
    .grid__cell--#{$key}#{$i} {
      flex-basis: ($i / $columns) * 100%;
      max-width: ($i / $columns) * 100%;
    }

    .grid__cell--shift-#{$key}#{$i} {
      margin-left: ($i / $columns) * 100%;
    }
  }
}

@mixin css-grid-cells($columns, $key) {
  @for $i from 1 through $columns {
    .css-grid__cell--#{$key}#{$i} {
      flex-basis: ($i / $columns) * 100%; // fallback
      max-width: ($i / $columns) * 100%; // fallback

      @supports(display: grid) {
        max-width: none;
        grid-column: span #{$i};
      }
    }
  }
}

// Allow an element to be horizontally stretched outside of its container
@mixin bleed($amount, $with-padding: false) {
  margin-left: -$amount;
  margin-right: -$amount;

  @if ($with-padding) {
    padding-left: $amount;
    padding-right: $amount;
  }
}

@mixin visually-hidden {
  border: 0;
  clip: rect(0 0 0 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
  white-space: nowrap;
}

@mixin visually-hidden-focusable {
  &:active,
  &:focus {
    clip: auto;
    height: auto;
    margin: 0;
    overflow: visible;
    position: static;
    width: auto;
    white-space: inherit;
  }
}

@mixin hover-bounce {
  animation-duration: 400ms;
  animation-name: hover-bounce;
}

@keyframes hover-bounce {
  0% {
    top: 0;
    animation-timing-function: ease-in;
  }

  50% {
    top: -0.4em;
    animation-timing-function: ease-out;
  }

  100% {
    top: 0;
  }
}

@mixin slider ($prefix: '') {
  .#{$prefix}slider {
    overflow: hidden;
  }

  .#{$prefix}slides-container {
    // stylelint-disable declaration-no-important
    overflow: visible !important;
    // stylelint-enable declaration-no-important
  }

  .#{$prefix}slider-controls {
    .control-arrow {
      width: 16px;
      height: 16px;
    }
  }

  .#{$prefix}slider-control--prev {
    .control-arrow {
      transform: rotate(90deg);
    }
  }

  .#{$prefix}slider-control--next {
    .control-arrow {
      transform: rotate(-90deg);
    }
  }

  .#{$prefix}slider-control--inactive {
    // stylelint-disable declaration-no-important
    cursor: default !important;
    // stylelint-enable declaration-no-important
    .control-arrow {
      opacity: 0.3;
    }
  }
}

$slider-one-column-width: (100 / 12) * 1%;

@mixin position-article-slides-container {
  @include respond-to('medium') {
    width: calc(100vw - #{map-get($container-padding, 'medium')} - #{$slider-one-column-width});
    margin-left: $slider-one-column-width;
  }

  @include respond-to('large') {
    width: calc(100vw - #{map-get($container-padding, 'large')});
    margin-left: 0;
  }

  @include respond-to('xlarge') {
    position: relative;

    width: calc(100vw - ((100vw - #{$container-width-max}) / 2) - #{2 * map-get($gutter-width, 'xlarge')});
    left: calc(((100vw - #{$container-width-max}) / 2));
  }
}

$mediumGallerySpacing: ((map-get($container-padding, 'medium') * 2) - map-get($gutter-width, 'medium'));
$largeGallerySpacing: ((map-get($container-padding, 'large') * 2) - map-get($gutter-width, 'large'));
$xlargeGallerySpacing: ((map-get($container-padding, 'xlarge') * 2) - map-get($gutter-width, 'xlarge'));

@mixin position-basic-slides-container {
  margin-left: 0;

  @include respond-to('medium') {
    margin-left: 50%;
    position: relative;
    width: calc( (((100vw - #{$mediumGallerySpacing}) * 10/12) - #{map-get($gutter-width, 'medium')}));
    left: calc( (((100vw - #{$mediumGallerySpacing}) * 10/12) - #{map-get($gutter-width, 'medium')}) / -2);
  }

  @include respond-to('large') {
    width: calc( (((100vw - #{$largeGallerySpacing}) * 8/12) - #{map-get($gutter-width, 'large')}));
    left: calc( (((100vw - #{$largeGallerySpacing}) * 8/12) - #{map-get($gutter-width, 'large')}) / -2);
  }

  @include respond-to('xlarge') {
    width: (((($container-width-max - $xlargeGallerySpacing) * 8/12) ) - map-get($gutter-width, 'xlarge'));
    left: -#{( ( ( ($container-width-max - $xlargeGallerySpacing) * 8/12) ) - map-get($gutter-width, 'xlarge') ) / 2};
  }
}
