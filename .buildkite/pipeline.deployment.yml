steps:
  - label: "Deploy to $BUILDKITE_GITHUB_DEPLOYMENT_ENVIRONMENT"
    if: build.env("BUILDKITE_GITHUB_DEPLOYMENT_TASK") == "deploy:weco"

    # These three lines create a "lock" around this pipeline.
    #
    # This means that once a deployment starts to an environment,
    # no other builds will deploy to that environment until this
    # deployment is complete and has run the end-to-end tests.
    #
    # == How it works ==
    #
    # This uses the "concurrency gate" pattern described in the Buildkite blog
    # here: https://buildkite.com/blog/concurrency-gates
    #
    # Once this job starts running, this build has to either:
    #
    #   1)  fail, or
    #   2)  complete all the other tasks in this concurrency group -- which is
    #       just the "Complete!" task at the end of the pipeline
    #
    # before any other build is allowed to run tasks in this concurrency group.
    # This means no other build can start a new deployment until this deployment
    # is complete.
    #
    # Note: we have separate concurrency groups for stage/prod, because it's okay
    # to deploy to them both simultaneously.
    concurrency_group: "front-end-deployment-${BUILDKITE_GITHUB_DEPLOYMENT_ENVIRONMENT}-gate"
    concurrency: 1
    key: start-deployment

    plugins:
      - wellcomecollection/aws-assume-role#v0.2.2:
          role: "arn:aws:iam::130871440101:role/experience-ci"

    agents:
      queue: nano

  - wait

  - label: "Trigger e2e tests"
    if: build.env("BUILDKITE_GITHUB_DEPLOYMENT_TASK") == "deploy:weco"
    command: ".buildkite/scripts/trigger-e2e.sh"
    agents:
      queue: nano

    soft_fail:
      - exit_status: 1

  - label: "Update pa11y dashboard"
    if: build.env("BUILDKITE_GITHUB_DEPLOYMENT_ENVIRONMENT") == "prod"
    plugins:
      - wellcomecollection/aws-assume-role#v0.2.2:
          role: "arn:aws:iam::130871440101:role/experience-ci"
      - ecr#v2.1.1:
          login: true
      - docker-compose#v3.5.0:
          run: pa11y
          command: [ "yarn", "deploy" ]
          env:
            - AWS_ACCESS_KEY_ID
            - AWS_SECRET_ACCESS_KEY
            - AWS_SESSION_TOKEN

  - wait

  - label: "Complete ${BUILDKITE_GITHUB_DEPLOYMENT_ENVIRONMENT} deployment"
    command: echo "Stage ${BUILDKITE_GITHUB_DEPLOYMENT_ENVIRONMENT} complete!"

    # This is the second half of the concurrency gate that "locks" the deployment.
    #
    # When this step completes, it "unlocks" the deployment and allows other
    # deployments to stage to begin.
    concurrency_group: "front-end-deployment-${BUILDKITE_GITHUB_DEPLOYMENT_ENVIRONMENT}-gate"
    concurrency: 1

    agents:
      queue: nano

  - block: ":rocket: Trigger prod deployment"
    if: build.env("BUILDKITE_GITHUB_DEPLOYMENT_ENVIRONMENT") == "stage"
    prompt: "Have you checked the change and main landing pages on staging?"

  - label: "Trigger prod deployment"
    if: build.env("BUILDKITE_GITHUB_DEPLOYMENT_ENVIRONMENT") == "stage"
    plugins:
      - wellcomecollection/github-deployments#v0.3.0:
          assume_role: "arn:aws:iam::130871440101:role/experience-ci"
          environment: prod
          ref: "${BUILDKITE_COMMIT}"
